str(df)
# Importing the Iris dataset
df <- read.csv("diabetes.txt",stringsAsFactors = TRUE)
str(df)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Importing the Iris dataset
df <- read.csv("diabetes.txt",stringsAsFactors = TRUE)
# Importing the Iris dataset
df <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Importing the Iris dataset
df <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
str(df)
source("~/Desktop/Ensembled models ML/model.R")
model.performance
# Neural network
model <- neuralnet(diabetes ~ ., data = TrainingSet,linear.output = F,hidden = 3)
library(neuralnet) # Neural network
# Neural network
model <- neuralnet(diabetes ~ ., data = TrainingSet,linear.output = F,hidden = 3)
# Model predictions
model.predict <- predict(model,TestingSet)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
# Neural network
model <- neuralnet(diabetes ~ ., data = TrainingSet,linear.output = T,hidden = 3)
# Model predictions
model.predict <- predict(model,TestingSet)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
# Neural network
model <- neuralnet(diabetes ~ ., data = TrainingSet,linear.output = F,hidden = 3)
help("neuralnet")
# Neural network
model <- neuralnet(diabetes ~ ., data = TrainingSet,linear.output = F,hidden = 3, stepmax=1e7)
# Model predictions
model.predict <- predict(model,TestingSet)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.predict
# Model predictions
# model.predict <- predict(model,TestingSet)
model.predict <- round(neuralnet::compute(model,TestingSet)$net.result[,2],0) # Neural network
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.predict
TestingSet$diabetes
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = as.numeric(TestingSet$diabetes))
as.numeric(TestingSet$diabetes)
model.predict
contrasts(TestingSet$diabetes)
model.predict
# Model predictions
# model.predict <- predict(model,TestingSet)
model.predict <- as.factor(round(neuralnet::compute(model,TestingSet)$net.result[,2],0), levels = c("neg","pos")) # Neural network
# Model predictions
# model.predict <- predict(model,TestingSet)
model.predict <- factor(round(neuralnet::compute(model,TestingSet)$net.result[,2],0), labels = c("neg","pos")) # Neural network
model.predict
TestingSet$diabetes
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.performance
# Random forest model
model <- randomForest(diabetes ~ ., data = TrainingSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "model.rds")
# Model predictions
model.predict <- predict(model,TestingSet)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.performance
source("~/Desktop/Ensembled models ML/model.R")
source("~/Desktop/Ensembled models ML/model.R")
source("~/Desktop/Ensembled models ML/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
library(shiny); runApp('~/Desktop/Shiny_apps/Shiny_test1/app1.R')
factor(c("Poor", "Non-poor", "Poor", "Non-poor"), labels = c(0, 1))
factor(c("e","a","b","d"))
factor(c("e","a","b","d"), levels = c(0,1,2,3))
factor(c("e","a","b","d"), labels = c(0,1,2,3))
str(diabetes)
# Importing the df dataset
df <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
str(diabetes)
str(df)
runApp()
predict(model,TestingSet)
# Random forest model
# model <- randomForest(diabetes ~ ., data = TrainingSet, ntree = 500, mtry = 4, importance = TRUE)
model <- glm(diabetes ~ pregnant+ glucose+ mass+ pedigree + age, family= binomial(),data=df)
# Model predictions
model.predict <- predict(model,TestingSet)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.predict
TestingSet$diabetes
fitted(model)
# Random forest model
# model <- randomForest(diabetes ~ ., data = TrainingSet, ntree = 500, mtry = 4, importance = TRUE)
model <- glm(diabetes ~ pregnant+ glucose+ mass+ pedigree + age, family= binomial(link = "logit"),data=df)
# Model predictions
model.predict <- predict(model,TestingSet)
model.predict
# Model predictions
# model.predict <- predict(model,TestingSet)
model.predict <- predict(model,TestingSet, type = "response")
# Random forest model
# model <- randomForest(diabetes ~ ., data = TrainingSet, ntree = 500, mtry = 4, importance = TRUE)
model <- glm(diabetes ~ pregnant+ glucose+ mass+ pedigree + age, family= binomial(),data=df)
# Model predictions
# model.predict <- predict(model,TestingSet)
model.predict <- predict(model,TestingSet, type = "response")
model.predict
TestingSet$diabetes
model.predict <- ifelse(model.predict > 0.5, factor("pos"),factor("neg"))
model.predict
class(TestingSet$diabetes)
model.predict <- ifelse(model.predict > 0.5, as.factor("pos"),as.factor("neg"))
model.predict
model.predict <- ifelse(model.predict > 0.5, "pos","neg")
model.predict
# Model predictions
# model.predict <- predict(model,TestingSet)
model.predict <- predict(model,TestingSet, type = "response")
model.predict
model.predict > 0.5
model.predict <- ifelse(model.predict > 0.5, "pos","neg")
model.predict
model.predict <- factor(model.predict)
model.predict
TestingSet$diabetes
model.predict <- factor(ifelse(model.predict > 0.5, "pos","neg"))
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
class(model.predict)
class(TestingSet$diabetes)
length(TestingSet$diabetes)
length(model.predict)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.predict
# Model predictions
# model.predict <- predict(model,TestingSet)
model.predict <- predict(model,TestingSet, type = "response")
model.predict <- factor(ifelse(model.predict > 0.5, "pos","neg"))
model.predict
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
help("glm")
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
str(df)
factor(df[,1:8])
# Decision tree
model<- C5.0(as.factor(df[,1:8]),
df[,9],trials = 10)
as.factor(df[,1:8]
)
df[1:8]
# Decision tree
df[1:8] <-lapply(df[1:8],factor)
str(df)
# Decision tree
df[1:8] <-lapply(df[1:8],as.numeric)
str(df)
library(C50) # Árbol de clasificación
help("C5.0")
df <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(df$age, p=0.75, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
# Decision tree
model<- C5.0(df[,1:8],df[,9],trials = 10)
model.predict <- predict(model,TestingSet) # Random forest
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.performance
# Save model to RDS file
saveRDS(model, "model.rds")
runApp('~/Desktop/Shiny_apps/Shiny_test3/app3.R')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
# Read data
weather <- read.csv("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv")
weather$outlook <- as.factor(weather$outlook)
weather$play <- as.factor(weather$play)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
# saveRDS(model, "model.rds")
# Read in the RF model
#model <- readRDS("model.rds")
####################################
# User interface                   #
####################################
ui <- fluidPage(theme = shinytheme("united"),
# Page header
headerPanel('Play Golf?'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h3>"),
selectInput("outlook", label = "Outlook:",
choices = list("Sunny" = "sunny", "Overcast" = "overcast", "Rainy" = "rainy"),
selected = "Rainy"),
sliderInput("temperature", "Temperature:",
min = 64, max = 86,
value = 70),
sliderInput("humidity", "Humidity:",
min = 65, max = 96,
value = 90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 2))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
getwd()
ls
list.files()
edit.files("app3.R")
edit.file("app3.R")
file.edit("app3.R")
