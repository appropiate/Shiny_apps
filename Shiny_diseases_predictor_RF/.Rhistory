library(systemPipeR)
library(systemPipeRdata)
systemPipeRdata::genWorkenvir(workflow = 'new', mydirname = 'spr_project')
setwd('spr_project')
# Create a project
sal_wf <- SPRproject(logs.dir = '.SPRproject_wf')
library(systemPipeR)
library(systemPipeRdata)
tryCMD("gzip")
tryCMD("Hisat2")
tryCMD("Hisat2")
shiny::runApp('Desktop/Shiny_apps/Shiny_diseases_predictor_RF')
runApp()
runApp('Desktop/Shiny_apps/Shiny_diseases_predictor_RF')
shiny::runApp('Desktop/Shiny_apps/Shiny_diseases_predictor_RF')
runApp('Desktop/Shiny_apps/Shiny_diseases_predictor_RF')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
shiny::runApp()
## Exporting and cleaning world data
world_data2 <- read.csv("countries_codes_and_coordinates.csv", header=T) # contains ISO3
world_data <- map_data("world") # Contains map
world_data <- fortify(world_data) # To avoid losing map
# saveRDS(world_data,"world.rds")
# world_data <- readRDS("world.rds")# Contains map
# remove space from ISO3 codes
world_data2$Alpha.3.code <- sapply(world_data2$Alpha.3.code,function(x){gsub(" ","",x)})
# match some  important country names between both datasets
old_names <- c("Antigua",   "UK","Iran"  ,
"Russia","USA" ,"Venezuela")
new_names <- c("Antigua and Barbuda","United Kingdom"  ,"Iran, Islamic Republic of",
"Russian Federation", "United States","Venezuela, Bolivarian Republic of")
for (i in 1:length(old_names)){
world_data$region[world_data$region == old_names[i]] <- new_names[i]}
# Add ISO3 codes to world_data from world_data2:
world_data["ISO3"] <- world_data2$Alpha.3.code[match(world_data$region,world_data2$Country)]
head(world_data)
## Dataset on diabetes prevalence
dfprev <- read.csv("diabetesPrevalence.csv", header = T)
dfprev <- dfprev[,c("Country.Name","Country.Code","X2011","X2021")]
colnames(dfprev) <- c("country", "ISO3","y2011","y2021")
# remove countries not present in world_data
dfprev <- dfprev[which(dfprev$ISO3%in%world_data$ISO3),]
# Add year columns to world_data:
world_data["y2011"] <- dfprev[,"y2011"][match(world_data$ISO3,dfprev$ISO3)]
world_data["y2021"] <- dfprev[,"y2021"][match(world_data$ISO3,dfprev$ISO3)]
runApp()
runApp()
runApp()
BiocManager::install("methylationArrayAnalysis")
# set up a  path to the data directory
dataDirectory <- system.file("extdata", package = "methylationArrayAnalysis")
# List files
list.files(dataDirectory, recursive = T)
getwd
getwd()
dataDirectory
if(!(require(methylationArrayAnalysis))) {BiocManager::install("methylationArrayAnalysis")}
if(!(require(methylationArrayAnalysis))) {BiocManager::install("limma")}
library(limma)
if(!(require(methylationArrayAnalysis))) {BiocManager::install("minfi")}
library(knitr)
library(limma)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylation450kmanifest)
library(RColorBrewer)
library(missMethyl)
library(minfiData)
library(Gviz)
library(DMRcate)
library(stringr)
# get the 450k annotation data
ann450 <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
head(ann450)
?getAnnotation
str(ann450)
# read in the sample sheet for the experiment
targets <- read.metharray.sheet(dataDirectory, pattern = "SampleSheet.csv")
targets
