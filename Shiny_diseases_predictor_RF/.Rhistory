input$pressure,
input$triceps,
input$insulin,
input$mass,
input$pedigree,
input$age),
stringsAsFactors = FALSE))
Diabetes <- 0
df <- rbind(df, Diabetes)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
# Rmarkdown document
output$markdown <- renderUI({
HTML(markdown::markdownToHTML(knit('about.Rmd', quiet = TRUE)))
})
} # server
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinythemes)
library(rmarkdown)
library(bookdown)
library(knitr)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#Loading dataset
df1 <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
# Read in the RF model
model <- readRDS("model.rds")
####################################
# User interface                   #
####################################
# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("united"),
navbarPage(
# theme = 'cerulean'
"Disease predictor",
tabPanel("Diabetes",
sidebarPanel(
tags$h3("Inputs:"),
sliderInput("pregnant",
label = "Number of pregnancies:",
value = 0,
min = min(df1$pregnant),
max = max(df1$pregnant)),
numericInput("glucose", "Plasma glucose concentration:", ""), # txt2 will be sent to server
numericInput("pressure", "Diastolic blood presure (mm Hg):",""),
numericInput("triceps", "Triceps skin fold thickness (mm):",""),
numericInput("insulin", "2 hour serum insulin (mu U/ml):",""),
numericInput("mass", "Body mass index:",""),
numericInput("pedigree", "Pedigree function:",""),
numericInput("age", "Age:",""),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
), # sidebarPanel
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
) # mainPanel
), # Navbar 1, tabPanel
tabPanel("About",
titlePanel("About"),
uiOutput('rmarkdown'),
align="justify")#tabPanel(), About
) #Navbar 2
) # fluidPage
####################################
# Server                           #
####################################
# Define server logic required obtain predictions of probabilities of patient having diabetes
server <- function(input, output) {
# Input Data
datasetInput <- reactive({
df <- data.frame(
Name = c("Number of pregnancies:",
"Plasma glucose concentration:",
"Diastolic blood presure (mm Hg):",
"Triceps skin fold thickness (mm):",
"2 hour serum insulin (mu U/ml):",
"Body mass index:",
"Pedigree function:",
"Age:"),
Value = as.character(c(input$glucose,
input$pressure,
input$triceps,
input$insulin,
input$mass,
input$pedigree,
input$age),
stringsAsFactors = FALSE))
Diabetes <- 0
df <- rbind(df, Diabetes)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
# Rmarkdown document
output$markdown <- renderUI({
HTML(markdown::markdownToHTML(knit('about.Rmd', quiet = TRUE)))
})
} # server
# Run the application
shinyApp(ui = ui, server = server)
knit(about.Rmd)
knit()
rmarkdown::render(about.Rmd)
getwd()
rmarkdown::render("about.Rmd")
runApp()
rmarkdown::render("about.Rmd")
rmdfiles <- c("About.Rmd")
sapply(rmdfiles, knit, quiet = T)
# Rmarkdown document
rmdfiles <- c("about.Rmd")
sapply(rmdfiles, knit, quiet = T)
runApp()
df1
df1[2,2]
df1[2,]
runApp()
runApp()
runApp()
help("t")
runApp()
predict(model,df1[3,])
df1$diabetes[3,9]
dim(df1)
df1$diabetes[3]
df1$diabetes[3,9]; df1$diabetes[3]
df1$diabetes[3]; df1$diabetes[3]
predict(model,df1[3,]); df1$diabetes[3]
predict(model,df1[5,]); df1$diabetes[5]
predict(model,df1[10,-9]); df1$diabetes[10]
predict(model,df1[3,-9]); df1$diabetes[3]
predict(model,df1[1,]); df1$diabetes[1]
model.performance
head(TestingSet)
which(model.predict != TestingSet$diabetes)
TrainingSet <- df[TrainingIndex,] # Training Set
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(df$age, p=0.75, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
which(predict(model, TrainingSet), TrainingSet$diabetes)
which(predict(model, TrainingSet) != TrainingSet$diabetes)
length(which(predict(model, TrainingSet) != TrainingSet$diabetes))
length(which(predict(model, TrainingSet) != TrainingSet$diabetes))*100/nrow(df)
runApp()
df <- data.frame(
Name = c("Number of pregnancies:",
"Plasma glucose concentration:",
"Diastolic blood presure (mm Hg):",
"Triceps skin fold thickness (mm):",
"2 hour serum insulin (mu U/ml):",
"Body mass index:",
"Pedigree function:",
"Age:"),
Value = as.character(c(0,
0,
0,
0,
0,
0,
0,
0),
stringsAsFactors = FALSE))
diabetes <- 0
df <- rbind(df, diabetes)
input <- t(df)
input
data.frame(input)
input
library(data.table)
transpose(df)
runApp()
runApp('~/Desktop/Shiny_apps/Shiny_test4/app-numeric.R')
round(predict(model,test,type="prob"), 3)
runApp()
df <- data.frame(
Name = c("Number of pregnancies:",
"Plasma glucose concentration:",
"Diastolic blood presure (mm Hg):",
"Triceps skin fold thickness (mm):",
"2 hour serum insulin (mu U/ml):",
"Body mass index:",
"Pedigree function:",
"Age:"),
Value = as.character(c(0,
0,
0,
0,
0,
0,
0,
0)),
stringsAsFactors = FALSE)
# diabetes <- 0
# df <- rbind(df, diabetes)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
test
names(iris)
colnames(iris)
runApp()
head(iris)
head(df)
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinythemes)
library(rmarkdown)
library(bookdown)
library(knitr)
library(data.table)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#Loading dataset
df1 <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
# Read in the RF model
model <- readRDS("model.rds")
# knitting Rmarkdown document
rmdfiles <- c("about.Rmd")
sapply(rmdfiles, knit, quiet = T)
####################################
# User interface                   #
####################################
# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("united"),
navbarPage(
# theme = 'cerulean'
"Disease predictor",
tabPanel("Diabetes",
sidebarPanel(
tags$h3("Inputs:"),
numericInput(inputId = "pregnant",
label = "Pregnant",
value = 0),
numericInput(inputId ="glucose",
label = "Glucose",
value = 100),
numericInput(inputId ="pressure",
label ="Pressure",
value = 50),
numericInput(inputId ="triceps",
label ="Triceps",
value = 25),
numericInput(inputId ="insulin",
label ="Insulin",
value = 150),
numericInput(inputId ="mass",
label ="Mass",
value = 30),
numericInput(inputId ="pedigree",
label ="Pedigree",
value = 2),
numericInput(inputId ="age",
label ="Age",
value = 30),
actionButton(inputId ="submitbutton",
label ="Submit",
class = "btn btn-primary")
), # sidebarPanel
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
) # mainPanel
), # Navbar 1, tabPanel
tabPanel("About",
titlePanel("About"),
withMathJax(includeMarkdown("about.md"))
)
)#tabPanel(), About
) # fluidPage
####################################
# Server                           #
####################################
# Define server logic required obtain predictions of probabilities of patient having diabetes
server <- function(input, output) {
# Input Data
datasetInput <- reactive({
df <- data.frame(
Name = c("Pregnant",
"Glucose",
"Pressure",
"Triceps",
"Insulin",
"Mass",
"Pedigree",
"Age"),
Value = as.character(c(input$pregnant,
input$glucose,
input$pressure,
input$triceps,
input$insulin,
input$mass,
input$pedigree,
input$age)),
stringsAsFactors = FALSE)
# diabetes <- 0
# df <- rbind(df, diabetes)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
} # server
# Run the application
shinyApp(ui = ui, server = server)
head(diabetes)
Prediction=predict(model,test)
model
# Performs stratified random split of the data set
set.seed(123)
TrainingIndex <- createDataPartition(df$age, p=0.75, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
help("C5.0")
# Importing the df dataset
diabetes <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
# Importing the df dataset
diabetes <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
# Performs stratified random split of the data set
set.seed(123)
TrainingIndex <- createDataPartition(df$age, p=0.75, list = FALSE)
TrainingSet <- diabetes[TrainingIndex,] # Training Set
# Importing the df dataset
diabetes <- read.csv("diabetes.txt", stringsAsFactors = TRUE)
# Performs stratified random split of the data set
set.seed(123)
TrainingIndex <- createDataPartition(df$age, p=0.75, list = FALSE)
TrainingIndex <- createDataPartition(diabetes$age, p=0.75, list = FALSE)
TrainingSet <- diabetes[TrainingIndex,] # Training Set
TestingSet <- diabetes[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
diabetes[-"diabetes"]
diabetes[-diabetes]
diabetes[-diabetes$diabetes]
diabetes[,"diabetes"]
diabetes[,-"diabetes"]
diabetes[,-9]
diabetes[9]
# Decision tree
model<- C5.0(diabetes[,-9], diabetes[9],trials = 10)
class(diabetes[9])
str
str(diabetes)
class(diabetes[,"diabetes"])
# Decision tree
model<- C5.0(diabetes[,-9], diabetes[,"diabetes"],trials = 10)
# Save model to RDS file
saveRDS(model, "model.rds")
# Model predictions
model.predict <- predict(model,TestingSet)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.performance
setwd()
getwd()
runApp()
df <- data.frame(
Name = c("Pregnant",
"Glucose",
"Pressure",
"Triceps",
"Insulin",
"Mass",
"Pedigree",
"Age"),
Value = as.character(c(0,
0,
0,
0,
0,
0,
0,
0)),
stringsAsFactors = FALSE)
df <- data.frame(
Name = c("Pregnant",
"Glucose",
"Pressure",
"Triceps",
"Insulin",
"Mass",
"Pedigree",
"Age"),
Value = as.character(c(0,
0,
0,
0,
0,
0,
0,
0)),
stringsAsFactors = FALSE)
df
# diabetes <- 0
# df <- rbind(df, diabetes)
input <- transpose(df)
input
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test
df <- data.frame(
Name = c("pregnant",
"glucose",
"pressure",
"triceps",
"insulin",
"mass",
"pedigree",
"age"),
Value = as.character(c(0,
0,
0,
0,
0,
0,
0,
0)),
stringsAsFactors = FALSE)
# diabetes <- 0
# df <- rbind(df, diabetes)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
Output
runApp()
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Read in the RF model
model <- readRDS("model.rds")
model
runApp('~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF')
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
runApp()
shiny::runApp()
