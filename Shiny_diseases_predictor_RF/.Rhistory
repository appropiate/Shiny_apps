iso_codes <- iso_codes[,-1]
iso_codes
iso_codes <- iso_codes[!apply(iso_codes, 1, function(x){all(x == x[1])}),]
iso_codes
names(iso_codes) <- c("Country", "ISO2", "ISO3", "UN")
head(iso_codes)
world_data
library(maps)
library(ggplot2)
world_data <-ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
head(iso_codes)
table(iso_codes$Country %in% unique(world_data$region) )
length(iso_codes$Country)
length(world_data$region)
length(unique(world_data$region))
head(world_data)
dfprev <- read.csv("diabetesPrevalence.csv", header = T)
head(dfprev)
dfprev <- dfprev[,c("Country.Name","Country.Code","X2011","X2021")]
head(dfprev)
length(unique(world_data$region))
length(unique(dfprev$Country.Name))
table(unique(world_data$region) %in% unique(dfprev$Country.Name))
world_data$region[which((!unique(world_data$region) %in% unique(dfprev$Country.Name)))]
unique(world_data$region)
unique(world_data$region)[which((!unique(world_data$region) %in% unique(dfprev$Country.Name)))]
dfprev$Country.Name
world_data <- read.csv("World_data_lat_long_ISO3.csv", header = T)
world_data <- read.csv("countries_codes_and_coordinates", header = T)
world_data <- read.csv("countries_codes_and_coordinates.csv", header = T)
head(df)
head(world_data)
world_data[,c("Country","Alpha.3.code","Latitude..average.","Longitude..average.")]
head(world_data)
world_data <- world_data[,c("Country","Alpha.3.code","Latitude..average.","Longitude..average.")]
head(world_data)
nrow(world_data)
nrow(dfprev)
table(world_data$Country %in% dfprev)
table(world_data$Country %in% dfprev$Country.Name)
library(maps)
library(ggplot2)
world_data <-ggplot2::map_data('world')
names(world_data)
world_data <- read.csv("countries_codes_and_coordinates.csv", header = T)
world_data <- world_data[,c("Country","Alpha.3.code","Latitude..average.","Longitude..average.")]
table(world_data$Alpha.3.code %in% dfprev$Country.Code)
dfprev$Country.Code
world_data$Alpha.3.code
colnames(world_data$Alpha.3.code) <- "iso3"
colnames(world_data$Alpha.3.code)
names(world_data$Alpha.3.code)
names(world_data[,2])
names(world_data) <- "iso3"
world_data <- read.csv("countries_codes_and_coordinates.csv", header = T)
world_data <- world_data[,c("Country","Alpha.3.code","Latitude..average.","Longitude..average.")]
names(world_data)
names(world_data$Country)
names(world_data)
names(world_data)["Alpha.3.code" ]
colnames(world_data)["Alpha.3.code" ]
library(data.table)
setnames(world_data,"Alpha.3.code"","iso3")
setnames(world_data,"Alpha.3.code","iso3")
head(dfprev)
setnames(dfprev,"Country.Code","iso3")
head(dfprev)
head(world_data)
colnames(dfprev) <- c("Country", "ISO3","2011","2021")
colnames(world_data) <- c("Country","ISO3","Latitude","Longitude")
head(world_data)
# melting dfprev
dfprev_melt <- melt(dfprev, id = c("Country", "ISO3"), variable.name = "Year", value.name = "Value")
library(reshape2)
# melting dfprev
dfprev_melt <- melt(dfprev, id = c("Country", "ISO3"), variable.name = "Year", value.name = "Value")
# melting dfprev
dfprev_melt <- reshape2::melt(dfprev, id = c("Country", "ISO3"), variable.name = "Year", value.name = "Value")
head(dfprev_melt)
dfprev <- read.csv("diabetesPrevalence.csv", header = T)
library(shiny)
world_data["Value"] <-plotdf$Value[match(world_data$ISO3, plotdf$ISO3)]
head(world_data)
head(world_data$ISO3)
nchar(world_data$ISO3[1])
gsub(" ",""," hola")
?apply
?sapply
sapply(world_data$ISO3,function(x){gsub(" ","",x)})
vapply(world_data$ISO3,function(x){gsub(" ","",x)})
lapply(world_data$ISO3,function(x){gsub(" ","",x)})
sapply(world_data$ISO3,function(x){gsub(" ","",x)})
class(sapply(world_data$ISO3,function(x){gsub(" ","",x)}))
world_data$ISO3 <- sapply(world_data$ISO3,function(x){gsub(" ","",x)})
head(world_data$ISO3)
table(unique(world_data$ISO3) %in% unique(dfprev_melt))
table(unique(world_data$ISO3) %in% unique(dfprev_melt$ISO3))
length(dfprev_melt$ISO3)
length( unique(dfprev_melt$ISO3))
length( unique(world_data$ISO3))
length(world_data$ISO3)
length(unique(world_data$ISO3))
head(world_data)
head(world_data$ISO3)
length(unique(world_data$ISO3))
length(unique(world_data_melt$ISO3))
length(unique(dfprev_melt$ISO3))
world_data["Value"] <-dfprev$Value[match(world_data$ISO3, dfprev$ISO3)]
head(world_data)
world_data["Value"]
head(dfprev)
head(dfprev_melt)
match(c(1,2),c(1,2,1,2,1,1,1))
match(1,c(1,2,1,2,1,1,1))
match('1',c('1','2','1','2','1','1','1'))
?match
world_data["Value"] <-dfprev_melt$Value[match(world_data$ISO3, dfprev$ISO3)]
head(world_data)
summary(world_data)
head(dfprev_melt)
length(unique(dfprev_melt$ISO3))
length(unique(world_data$ISO3))
dfprev_melt <- dfprev_melt[which(dfprev_melt$ISO3 %in% world_data$ISO3)]
dfprev_melt <- dfprev_melt[which(dfprev_melt$ISO3 %in% world_data$ISO3),]
table(unique(world_data$ISO3) %in% unique(dfprev_melt$ISO3))
which(dfprev_melt$ISO3 %in% world_data$ISO3
)
table(dfprev_melt$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev_melt$ISO3)
library(reshape2)
dfprev <- read.csv("diabetesPrevalence.csv", header = T)
dfprev <- dfprev[,c("Country.Name","Country.Code","X2011","X2021")]
colnames(dfprev) <- c("country", "ISO3","2011","2021")
head(dfprev)
# melting dfprev
dfprev_melt <- reshape2::melt(dfprev, id = c("country", "ISO3"), variable.name = "Year", value.name = "Value")
head(dfprev_melt)
length(unique(dfprev_melt$ISO3))
table(dfprev_melt$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev_melt$ISO3)
world_data <- world_data[which(world_data$ISO3%in% dfprev_melt$ISO3),]
table(dfprev_melt$ISO3 %in% world_data$ISO3)
dfprev_melt <- dfprev_melt[which(dfprev_melt$ISO3 %in% world_data$ISO3),]
table(dfprev_melt$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev_melt$ISO3)
plotdf <. dfprev_melt[dfprev_melt$Year == "2011"]
plotdf <- dfprev_melt[dfprev_melt$Year == "2011"]
plotdf <- dfprev_melt[dfprev_melt$Year == "2011",]
plotdf
worlda
world_data["Year"] <- rep("2011",nrow(worldl))
world_data["Year"] <- rep("2011",nrow(world_data))
world_data["Year"] <- rep("2011",nrow(world_data))
world_data["Value"] <- rep("2022",nrow(world_data))
world_data["Value"] <- plotdf$Value[match(world_data$ISO3, plotdf$ISO3)]
length(world_data$ISO3)
length(unique(world_data$ISO3))
length(dfprev($ISO3))
length(dfprev$ISO3)
length(unique(dfprev$ISO3))
world_data[which(!unique(world_data$iso3)),]
!unique(world_data$ISO3)
world_data[(duplicated(df) | duplicated(df, fromLast = TRUE)),]
world_data[(duplicated(world_data) | duplicated(world_data, fromLast = TRUE)),]
world_data[which(unique(world_data$iso3)),]
world_data[unique(world_data$iso3),]
world_data
world_data[world_data$ISO3 == unique(world_data$ISO3),]
world_data[unique(world_data$ISO3),]
summary(world_data)
unique(world_data$ISO3)
world_data[world_data$ISO3 == unique(world_data$ISO3),]
world_data[-world_data$ISO3 == unique(world_data$ISO3),]
world_data[-(world_data$ISO3 == unique(world_data$ISO3)),]
table(dfprev_melt$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev_melt$ISO3)
world_data <- read.csv("countries_codes_and_coordinates.csv", header = T)
world_data <- world_data[,c("Country","Alpha.3.code","Latitude..average.","Longitude..average.")]
colnames(world_data) <- c("country","ISO3","latitude","longitude")
world_data$ISO3 <- sapply(world_data$ISO3,function(x){gsub(" ","",x)}) # remove extra space in ISO3
length(unique(world_data$ISO3))
head(world_data)
library(reshape2)
dfprev <- read.csv("diabetesPrevalence.csv", header = T)
dfprev <- dfprev[,c("Country.Name","Country.Code","X2011","X2021")]
colnames(dfprev) <- c("country", "ISO3","2011","2021")
head(dfprev)
table(dfprev$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev$ISO3)
dfprev_melt <- dfprev_melt[which(dfprev_melt$ISO3 %in% world_data$ISO3),]
table( world_data$ISO3%in% dfprev$ISO3)
table(dfprev$ISO3 %in% world_data$ISO3)
dfprev<- dfprev_melt[which(dfprev$ISO3 %in% world_data$ISO3),]
table(dfprev$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev$ISO3)
world_data <- world_data[which(world_data$ISO3%in% dfprev$ISO3),]
table( world_data$ISO3%in% dfprev$ISO3)
dfprev$ISO3[dfprev$ISO3 %in% world_data$ISO3]
dfprev$ISO3[!(dfprev$ISO3 %in% world_data$ISO3)]
!(dfprev$ISO3 %in% world_data$ISO3)
table(dfprev$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev$ISO3)
summary(dfprev)
table(dfprev$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev$ISO3)
length(unique(dfprev$ISO3))
which(unique(dfprev$ISO3))
dfprev$ISO3
unique(world_data$ISO3)
unique(dfprev$ISO3)
dfprev$ISO3[unique(dfprev$ISO3)]
unique(dfprev$ISO3)
which(dfprev$ISO3 == "ABW")
dfprev[which(dfprev$ISO3 == "ABW"),]
library(reshape2)
dfprev <- read.csv("diabetesPrevalence.csv", header = T)
dfprev <- dfprev[,c("Country.Name","Country.Code","X2011","X2021")]
colnames(dfprev) <- c("country", "ISO3","2011","2021")
head(dfprev)
dfprev[which(dfprev$ISO3 == "ABW"),]
dfprev<- dfprev[which(dfprev$ISO3 %in% world_data$ISO3),]
table(dfprev$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev$ISO3)
world_data <- world_data[which(world_data$ISO3%in% dfprev$ISO3),]
table( world_data$ISO3%in% dfprev$ISO3)
world_data["2011"] <- rep("NA",nrow(world_data))
world_data["2021"] <- rep("NA",nrow(world_data))
summary(world_data)
table(dfprev$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev$ISO3)
length(unique(world_data$ISO3))
a <- c(2,3,45,5,6,7,8,8,8,8,9,9)
duplicated(a)
which(duplicated(a))
world_data[which(duplicated(world_data$ISO3)),]
world_data[world_data$ISO3 == "RUS",]
world_data <- world.data[-which(duplicated(world_data$ISO3)),]
world_data <- world_data[-which(duplicated(world_data$ISO3)),]
all(unique(world_data$ISO3 == world_data$ISO3))
length(world_data$ISO3)
library(reshape2)
dfprev <- read.csv("diabetesPrevalence.csv", header = T)
dfprev <- dfprev[,c("Country.Name","Country.Code","X2011","X2021")]
colnames(dfprev) <- c("country", "ISO3","2011","2021")
head(dfprev)
dfprev <- dfprev[-which(duplicated(dfprev$ISO3)),]
length(dfprev$ISO3)
dfprev <- read.csv("diabetesPrevalence.csv", header = T)
dfprev <- dfprev[,c("Country.Name","Country.Code","X2011","X2021")]
colnames(dfprev) <- c("country", "ISO3","2011","2021")
which(duplicated(dfprev$ISO3))
#remove duplicates:
length(which(duplicated(world_data$ISO3)))
world_data <- read.csv("countries_codes_and_coordinates.csv", header = T)
world_data <- world_data[,c("Country","Alpha.3.code","Latitude..average.","Longitude..average.")]
colnames(world_data) <- c("country","ISO3","latitude","longitude")
# remove extra space in ISO3:
world_data$ISO3 <- sapply(world_data$ISO3,function(x){gsub(" ","",x)})
#remove duplicates:
length(which(duplicated(world_data$ISO3)))
world_data <- world_data[-which(duplicated(world_data$ISO3)),]
all(unique(world_data$ISO3 == world_data$ISO3))
all(dfprev$ISO3 == world_data$ISO3)
all(unique(dfprev$ISO3 == dfprev$ISO3))
head(dfprev)
table(dfprev$ISO3 %in% world_data$ISO3)
table( world_data$ISO3%in% dfprev$ISO3)
dfprev<- dfprev[which(dfprev$ISO3 %in% world_data$ISO3),]
table( world_data$ISO3%in% dfprev$ISO3)
world_data <- world_data[which(world_data$ISO3%in% dfprev$ISO3),]
all(dfprev$ISO3 == world_data$ISO3)
nrow(world_data)
nrow(dfprev)
all(dfprev$ISO3 %in% world_data$ISO3)
match(1,c(1,2,3,4,1))
match("a",c("a","b","c","a"))
a <- "a"
b <- c('a','b','b','b','a')
match(a,b)
b <- c('d',a','b','b','b','a')
b <- c('d','a','b','b','b','a')
match(a,b)
a <- c("a","b")
match(a,b)
# add year columns to world_data:
world_data["2011"] <- dfprev$2011[match(world_data$iso3),dfprev$ISO3]
head(dfprev)
# add year columns to world_data:
world_data["2011"] <- dfprev[,"2011"][match(world_data$iso3),dfprev$ISO3]
match(world_data$iso3),dfprev$ISO3
match(world_data$iso3,dfprev$ISO3)
match(world_data$ISO3,dfprev$ISO3)
# add year columns to world_data:
world_data["2011"] <- dfprev[,"2011"][match(world_data$ISO3,dfprev$ISO3)]
world_data["2021"] <- dfprev[,"2021"][match(world_data$ISO3,dfprev$ISO3)]
dim(world_data)
dim(dfprev)
head(world_data)
world_data[,-c("2021")]
world_data[,names(world_data) != "2021"]
str(world_data)
worldMaps <- function(world_data, year){
# Function for setting the aesthetics of the plot
my_theme <- function(){
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill="white", colour = "white"))
}
# Select only the data that the user has selected to view
ifelse(year == "2011", plotdf <- world_data[,names(world_data) != "2021"], plotdf <- world_data[,names(world_data) != "2011"])
#Create caption with the data source to show underneath the map
capt <- "Source: World Development Indicators"
#Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(plotdf, latitude >= -60 & latitude <= 90),
color = "gray70",
size = 0.1,
aes(x = longitude,
y = latitude,
fill = year,
tooltip = sprintf("%s<br/>%s", ISO3, year))) +
scale_fill_gradientn(colours = brewer.pal(5,"RdBu"),
na.value = "white") +
labs(fill = year,
color = year,
title = NULL,
x = NULL,
y = NULL,
caption = capt) +
my_theme()
return(g)
}
ggiraph(code = print(worldMaps(world_data , "2011"))
)
str(world_data)
worldMaps <- function(world_data, year){
# Function for setting the aesthetics of the plot
my_theme <- function(){
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill="white", colour = "white"))
}
# Select only the data that the user has selected to view
ifelse(year == "2011", plotdf <- world_data[,names(world_data) != "2021"], plotdf <- world_data[,names(world_data) != "2011"])
#Create caption with the data source to show underneath the map
capt <- "Source: World Development Indicators"
#Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(plotdf, latitude >= -60 & latitude <= 90),
color = "gray70",
size = 0.1,
aes(x = longitude,
y = latitude,
fill = year,
tooltip = sprintf("%s<br/>%s", ISO3, year))) +
# scale_fill_gradientn(colours = brewer.pal(5,"RdBu"),
#                      na.value = "white") +
labs(fill = year,
color = year,
title = NULL,
x = NULL,
y = NULL,
caption = capt) +
my_theme()
return(g)
}
ggiraph(code = print(worldMaps(world_data , "2011"))
)
worldMaps <- function(world_data, year){
# Function for setting the aesthetics of the plot
my_theme <- function(){
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill="white", colour = "white"))
}
# Select only the data that the user has selected to view
ifelse(year == "2011", plotdf <- world_data[,names(world_data) != "2021"], plotdf <- world_data[,names(world_data) != "2011"])
#Create caption with the data source to show underneath the map
capt <- "Source: World Development Indicators"
#Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(plotdf, latitude >= -60 & latitude <= 90),
color = "gray70",
size = 0.1,
aes(x = longitude,
y = latitude,
fill = year,
tooltip = sprintf("%s<br/>%s", ISO3, year))) +
scale_fill_gradient(colours = brewer.pal("RdBu"),
na.value = "white") +
labs(fill = year,
color = year,
title = NULL,
x = NULL,
y = NULL,
caption = capt) +
my_theme()
return(g)
}
ggiraph(code = print(worldMaps(world_data , "2011")))
worldMaps <- function(world_data, year){
# Function for setting the aesthetics of the plot
my_theme <- function(){
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill="white", colour = "white"))
}
# Select only the data that the user has selected to view
ifelse(year == "2011", plotdf <- world_data[,names(world_data) != "2021"], plotdf <- world_data[,names(world_data) != "2011"])
#Create caption with the data source to show underneath the map
capt <- "Source: World Development Indicators"
#Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(plotdf, latitude >= -60 & latitude <= 90),
color = "gray70",
size = 0.1,
aes(x = longitude,
y = latitude,
fill = year,
tooltip = sprintf("%s<br/>%s", ISO3, year))) +
scale_fill_gradientn(colours = brewer.pal(5,"RdBu"),
na.value = "white") +
labs(fill = year,
color = year,
title = NULL,
x = NULL,
y = NULL,
caption = capt) +
my_theme()
return(g)
}
worldMaps(world_data,"2011")
head(world_data)
head(world_data)
worldMaps <- function(world_data, year){
# Function for setting the aesthetics of the plot
my_theme <- function(){
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill="white", colour = "white"))
}
# Select only the data that the user has selected to view
ifelse(year == "2011", plotdf <- world_data[,names(world_data) != "2021"], plotdf <- world_data[,names(world_data) != "2011"])
#Create caption with the data source to show underneath the map
capt <- "Source: World Development Indicators"
#Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(plotdf, latitude >= -60 & latitude <= 90),
color = "gray70",
size = 0.1,
aes(x = longitude,
y = latitude,
fill = year,
tooltip = sprintf("%s<br/>%s", ISO3, year))) +
scale_fill_gradientn(colours = brewer.pal(5,"RdBu"),
na.value = "white") +
labs(fill = year,
color = year,
title = NULL,
x = NULL,
y = NULL,
caption = capt) +
my_theme()
return(g)
}
worldMaps(world_data,"2011")
?scale_fill_gradient()
is.na(plotdf$ISO3)
table(is.na(plotdf$ISO3))
head(world_data)
