library(shiny); runApp('~/Desktop/Shiny_apps/Shiny_test2/app2.R')
runApp('~/Desktop/Shiny_apps/Shiny_test3/app3.R')
runApp('~/Desktop/Shiny_apps/Shiny_test3/app3.R')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
# Read data
weather <- read.csv("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv")
weather$outlook <- as.factor(weather$outlook)
weather$play <- as.factor(weather$play)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
# saveRDS(model, "model.rds")
# Read in the RF model
#model <- readRDS("model.rds")
####################################
# User interface                   #
####################################
ui <- fluidPage(theme = shinytheme("united"),
# Page header
headerPanel('Play Golf?'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h3>"),
selectInput("outlook", label = "Outlook:",
choices = list("Sunny" = "sunny", "Overcast" = "overcast", "Rainy" = "rainy"),
selected = "Rainy"),
sliderInput("temperature", "Temperature:",
min = 64, max = 86,
value = 70),
sliderInput("humidity", "Humidity:",
min = 65, max = 96,
value = 90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 2))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(1,
2,
3,
4)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
df
transpose(df)
# Read in the RF model
model <- readRDS("model.rds")
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Read in the RF model
model <- readRDS("model.rds")
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
write.csv(TestingSet, "testing.csv")
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
read.csv("testing.csv")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
source("~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF/model.R")
model.performance
## Decision Tree model
# Importing libraries
library(randomForest)
library(caret)
library(C50) # Decision tree
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Read in the Decision tree model
model <- readRDS("model.rds")
#Read data
TestingSet <- read.csv("testing.csv", header = TRUE)
TestingSet <- TestingSet[,-1]
# Model predictions
model.predict <- predict(model,TestingSet)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.predict
TestingSet
TestingSet$diabetes
## Decision Tree model
# Importing libraries
library(randomForest)
library(caret)
library(C50) # Decision tree
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Read in the Decision tree model
model <- readRDS("model.rds")
#Read data
TestingSet <- read.csv("testing.csv", header = TRUE, stringsAsFactors = TRUE)
TestingSet <- TestingSet[,-1]
# Model predictions
model.predict <- predict(model,TestingSet)
# Model Performance
model.performance <- confusionMatrix(data = model.predict ,
reference = TestingSet$diabetes)
model.performance
summary(model)
table(summary(df))
library(kableExtra)
sapply(df, hist)
sapply(df[-9], hist)
apply(df[-9], hist)
rapply(df[-9], hist)
help("gather")
library(tidyr)
help("gather")
