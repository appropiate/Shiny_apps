library(IlluminaHumanMethylation450kmanifest)
library(RColorBrewer)
library(missMethyl)
library(minfiData)
library(Gviz)
library(DMRcate)
library(stringr)
library(matrixStats)
# get the 450k annotation data
ann450k <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
head(ann450k)
# read in the sample sheet for the experiment
targets <- read.metharray.sheet(dataDirectory, pattern = "SampleSheet.csv")
targets
# read in the raw data from the IDAT files
rgSet <- read.metharray.exp(targets = targets)
rgSet
# Give samples descriptive names
targets$ID <- paste(targets$Sample_Group, targets$Sample_Name, sep = ".")
sampleNames(rgSet) <- targets$ID
rgSet
# Chunk 4
# calculate the detection p-values
detP <- detectionP(rgSet)
head(detP)
# examine mean detection p.values across all samples to identify any failed sample
pal <- brewer.pal(8,"Dark2")
par(mfrow = c(1,2))
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las = 2, cex.names = 0.8,
ylab = "Mean detection p-values", main = "Mean detection p-values")
abline(h=0.05, col="red")
legend("topleft", legend = levels(factor(targets$Sample_Group)), fill = pal, bty = 'n')
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las = 2, cex.names = 0.8,
ylim = c(0,0.002), ylab = "Mean detection p-values", main = "Mean detection p-values")
abline(h=0.05, col="red")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill= pal, bty= "n")
# Chunk 5
qcReport(rgSet, sampNames = targets$ID, sampGroups=targets$Sample_Group, pdf = "qcReport.pdf")
# Remove poor quality samples
keep <- colMeans(detP) < 0.05
rgSet <- rgSet[,keep]
rgSet
# Remove poor quality samples from targets data
targets <- targets[keep,]
targets[,1:5]
# Remove poor quality samples from detection p-value table
detP <- detP[,keep]
dim(detP)
head(detP)
# Chunk 6
# normalize the data; this results in a GenomicRatioSet object
mSetSq <- preprocessQuantile(rgSet)
# Create a MethylSet object from the raw data for plotting
mSetRaw <- preprocessRaw(rgSet)
# Visualize what the data looks like before and after normalization
par(mfrow=(c(1,2)))
densityPlot(rgSet, sampGroups = targets$Sample_Group, main="Raw", legend = FALSE, pal = pal)
legend("top", legend = levels(factor(targets$Sample_Group)), text.col = pal, bty = "n")
densityPlot(getBeta(mSetSq), sampGroups = targets$Sample_Group, main= "Normalized", legend=FALSE,pal = pal)
legend("left", legend = levels(factor(targets$Sample_Group)), text.col = pal, bty = "n")
# Chunk 7
### MDS plots to look at largest sources of variation
# According to group
par(mfrow=c(1,2))
plotMDS(getM(mSetSq), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Group)])
legend("top", legend = levels(factor(targets$Sample_Group)), text.col = pal, bty = "n", cex = 0.7)
# According to sample source:
plotMDS(getM(mSetSq), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Source)])
legend("top", legend = levels(factor(targets$Sample_Source)), text.col = pal, bty = "n", cex = 0.7)
# Chunk 8
par(mfrow= c(1,3))
plotMDS(getM(mSetSq), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Group)], dim = c(1,3))
legend("top", legend = levels(factor(targets$Sample_Group)), text.col = pal, bty = "n", cex = 0.7)
plotMDS(getM(mSetSq), top = 1000, gene.selection = "common",
col = pal[factor(targets$Sample_Group)], dim = c(2,3))
legend("topleft", legend = levels(factor(targets$Sample_Group)), text.col = pal, bty = "n", cex = 0.7)
plotMDS(getM(mSetSq), top =1000, gene.selection = "common",
col = pal[factor(targets$Sample_Group)], dim = c(3,4))
legend("topright", legend = levels(factor(targets$Sample_Group)), text.col = pal, bty = "n", bg = "white")
# ensure probes are in the same order in the mSetSq and detP objects
detP <- detP[match(featureNames(mSetSq), rownames(detP)),]
# Remove probes that fail i one or more samples
keep <- rowSums(detP < 0.01) == ncol(mSetSq)
table(keep)
mSetSqFlt <- mSetSq[keep,]
mSetSqFlt
mSetSqFlt <- dropLociWithSnps(mSetSqFlt)
mSetSqFlt
xReactiveProbes <- read.csv(file = paste(dataDirectory,
"48639-non-specific-probes-Illumina450k.csv",
sep = "/"), stringsAsFactors = FALSE)
keep
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
featuresNames(mSetSqFlt)
featureNames(mSetSqFlt)
xReactiveProbes$TargetID
head(xReactiveProbes)
par(mfrow = c(1,2))
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Group)], cex = 0.7)
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Group)], cex = 0.8)
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Group)], cex = 0.7)
legend("right", legend = levels(factor(targets$Sample_Group)), text.col = pal,
cex = 0.6, bty = "n")
par(mfrow = c(1,2))
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Group)], cex = 0.7)
legend("right", legend = levels(factor(targets$Sample_Group)), text.col = pal,
cex = 0.6, bg = "white")
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col = pal[factor(targets$Sample_Source)])
legend("right", legend=levels(factor(targets$Sample_Source)), text.col = pal,
cex = 0.7, bg = "white")
par(mfrow = c(1,3))
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Source)], dim.plot = c(1,3))
legend("topright", legend = levels(factor(targets$Sample_Source)), text.col = pal,
cex = 0.6, bg = "white")
par(mfrow = c(1,3))
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col=pal[factor(targets$Sample_Source)], dim.plot = c(1,3))
legend("rigth", legend = levels(factor(targets$Sample_Source)), text.col = pal,
cex = 0.6, bg = "white")
legend("right", legend = levels(factor(targets$Sample_Source)), text.col = pal,
cex = 0.6, bg = "white")
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col = pal[factor(targets$Sample_Source)], dim = c(2,3))
legend("topright", legend = levels(factor(targets$Sample_Source)), text.col = pal,
cex = 0.7, bg = "white")
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col = pal[factor(targets$Sample_Source)], dim.plot =  = c(3,4))
plotMDS(getM(mSetSqFlt), top = 1000, gene.selection = "common",
col = pal[factor(targets$Sample_Source)], dim.plot =c(3,4))
legend("right", legend=levels(factor(targets$Sample_Source)), text.col = pal,
cex = 0.7, bg = "white")
mVals <- getM(mSetSqFlt)
head(mVals[,1:5])
# Calculate Beta values:
bVals <- getBeta(mSetSqFlt)
head(bvals[,1.5])
head(bvals[,1:5])
head(bVals[,1:5])
par(mfrow= c(1,2))
densityPlot(bVals, sampGroups = targets$Sample_Group, main = "Beta values",
legend = FALSe, xlab = "Beta values")
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col = pal)
par(mfrow= c(1,2))
densityPlot(bVals, sampGroups = targets$Sample_Group, main = "Beta values",pal = pal,
legend = FALSe, xlab = "Beta values")
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col = pal)
densityPlot(mVals, sampGroups = targets$Sample_Group, main = "M-values",
legend = FALSE, xlab = "M values")
head(mVals[,1:5])
legend("topleft", legend = levels(factor(targets$Sample_Group, )), text.col = pal)
par(mfrow= c(1,2))
par(mfrow= c(1,2))
densityPlot(bVals, sampGroups = targets$Sample_Group, main = "Beta values",pal = pal,
legend = FALSe, xlab = "Beta values")
legend("top", legend = factor(targets$Sample_Group),
text.col = pal)
par(mfrow= c(1,2))
densityPlot(bVals, sampGroups = targets$Sample_Group, main = "Beta values",pal = pal,
legend = FALSe, xlab = "Beta values")
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col = pal)
densityPlot(bVals, sampGroups = targets$Sample_Group, main = "Beta values",pal = pal,
legend = FALSE, xlab = "Beta values")
par(mfrow= c(1,2))
densityPlot(bVals, sampGroups = targets$Sample_Group, main = "Beta values",pal = pal,
legend = FALSE, xlab = "Beta values")
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col = pal)
densityPlot(mVals, sampGroups = targets$Sample_Group, main = "M-values",
legend = FALSE, xlab = "M values")
legend("topleft", legend = levels(factor(targets$Sample_Group, )), text.col = pa)
densityPlot(mVals, sampGroups = targets$Sample_Group, main = "M-values",
legend = FALSE, xlab = "M values")
par(mfrow= c(1,2))
densityPlot(bVals, sampGroups = targets$Sample_Group, main = "Beta values",pal = pal,
legend = FALSE, xlab = "Beta values")
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col = pal)
densityPlot(mVals, sampGroups = targets$Sample_Group, main = "M-values",
legend = FALSE, xlab = "M values")
legend("topleft", legend = levels(factor(targets$Sample_Group)), text.col = pa)
legend("topleft", legend = levels(factor(targets$Sample_Group)), text.col = pa)
par(mfrow= c(1,2))
densityPlot(bVals, sampGroups = targets$Sample_Group, main = "Beta values",pal = pal,
legend = FALSE, xlab = "Beta values")
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col = pal)
densityPlot(mVals, sampGroups = targets$Sample_Group, main = "M-values",
legend = FALSE, xlab = "M values")
legend("topleft", legend = levels(factor(targets$Sample_Group)), text.col = pal)
# Factor of interest according to MDS plots
cellType <- factor(targets$Sample_Group)
# Individual effect to account for as well
individual <- factor(targets$Sample_Source)
# Use the above to createa  design matrix
design <- model.matrix(~ 0 + cellType + individual, data = targets)
design
individual
levels(cellType)
levels(individual)
levels(individual)[-1]
colnames(design) <- c(levels(cellType),levels(individual)[-1])
design
# Fit the linear model
fit <- lmFit(mVals,design)
?lmFit
# Use the above to create a  design matrix
design <- model.matrix(~ 0 + cellType + individual, data = targets)
design
levels(cellType)
design
colnames(design) <- c(levels(cellType),levels(individual)[-1])
design
fit
library(utils)
combn(colnames(design),2)
combn(levels(cellType),2)
# create a contrast matrix for specific comparisons
contMatrix <- makeContrasts(naive-rTreg,
naive-act_naive,
rTreg-cat_rTreg,
act_naive-act_rTreg,
levels = design)
contMatrix
colnames(design) <- c(levels(cellType),levels(individual)[-1])
design
# create a contrast matrix for specific comparisons
contMatrix <- makeContrasts(naive-rTreg,
naive-act_naive,
rTreg-act_rTreg,
act_naive-act_rTreg,
levels = design)
contMatrix
# Fit the contrasts
fit2 <- contrasts.fit(fit,contMatrix)
fit2 <- eBayes(fit2)
# number of DM CpGs at FDR < 0.05
summary(decideTests(fit2))
colnames(ann450k)
# Table of results for the first contrsast (naive - rTreg)
ann450kSub <- ann450k[match(rownames(mVals),ann450k$Name),c(1:4, 12:19,24:ncol(ann450k))]
DMPs <- topTable(fit2, number = Inf, coef = 1, genelist = ann450kSub)
head(DMPs)
head(DMPs)
write.table(DMPs, file = "DMPs.csv", sep = ",", row.names = FALSE)
# plot the top 4 most significantly differentially methylated CpGs
par(mfrow= c(2,2))
# plot the top 4 most significantly differentially methylated CpGs
par(mfrow= c(2,2))
plotCpg(bVals, cpg = cpg, pheno = targets$Sample_Group, ylab = "Beta values")
sapply(rownames(DMPs[1:4]), function(cpg){
plotCpg(bVals, cpg = cpg, pheno = targets$Sample_Group, ylab = "Beta values")
})
DMPs[1:4]
DMPs[1:4]
rownames(DMPs[1:4])
head(DMPs)
rownames(DMPs)[1:4]
# plot the top 4 most significantly differentially methylated CpGs
par(mfrow= c(2,2))
sapply(rownames(DMPs)[1:4], function(cpg){
plotCpg(bVals, cpg = cpg, pheno = targets$Sample_Group, ylab = "Beta values")
})
sapply(rownames(DMPs)[1:4], function(cpg){
plotCpg(bVals, cpg = cpg, pheno = targets$Sample_Group, ylab = "Beta values", las = 2)
})
?plotCpg
myAnnotation <- cpg.annotate(object= mVals, datatype = "array",what = "M",
analysis.type = "differential", design = design,
contrasts = TRUE, cont.matrix = contMatrix,
coef = "naive-rTreg", arraytype = "450K")
myAnnotation <- cpg.annotate(object= mVals, datatype = "array",what = "M",
analysis.type = "differential", design = design,
contrasts = TRUE, cont.matrix = contMatrix,
coef = "naive - rTreg", arraytype = "450K")
fit2$coefficients
# create a contrast matrix for specific comparisons
contMatrix <- makeContrasts(naive - rTreg,
naive - act_naive,
rTreg - act_rTreg,
act_naive - act_rTreg,
levels = design)
contMatrix
str(myAnnotation)
?cpg.annotate
DMRs <- dmrcate(myAnnotation, lambda = 1000, C=2)
DMRs$results
results.ranges <- extractRanges(DMRs)
results.ranges
?dmrcate
#set up the grouping variables and colours
groups <- pal[1:length(unique(targets$Sample_Group))]
names(groups) <- levels(factor(targets$Sample_Group))
cols <- groups[as.character(factor(targets$Sample_Group))]
# Draw the plot for the top DMR
par(mfrow= c(1,1))
as.character(factor(targets$Sample_Group))
targets$Sample_Group
unique(targets$Sample_Group)
cols
DMR.plot(ranges = results.ranges, dmr = 2, CpGs = bVals, phen.col = cols,
what = "Beta", arraytype = "450K", genome = "hg19")
results.ranges
results.ranges[1,]
results.ranges[1:3,]
# index of DMR to be plotted
dmrIndex <- 1
as.numeric(start(results.ranges[dmrIndex]))
# extract chromosome number and location from DMR results
chrom <- as.character(seqnames(results.ranges[dmrIndex]))
start <- as.numeric(start(results.ranges[dmrIndex]))
end <- as.numeric(end(results.ranges[dmrIndex]))
# add 25% extra space to plot
minbas <- start - (0.25*(end -start))
maxbase <- end + (0.25*(end -start))
## Add CpG islands
islandHMM <- read.csv(paste0(dataDirectory,"model-based-cpg-islands-hg19-chr17.txt"),
sep = "\t", stringsAsFactors = F, header = F)
## Add CpG islands
islandHMM <- read.csv(paste0(dataDirectory,"/model-based-cpg-islands-hg19-chr17.txt"),
sep = "\t", stringsAsFactors = F, header = F)
results.ranges[1:3,]
head(islandHMM)
?GRanges
?Rle
head(islandHMM)
islandHMM[,1]
Rle(islandHMM[,1])
islandData <- GRanges(seqnames = Rle(islandHMM[,1]),
ranges = IRanges(start = islandHMM[,2], end = islandHMM[,3]),
strand = Rle(strand(rep("*", nrow(islandHMM)))))
strand(rep("*", nrow(islandHMM)))
?strand
islandData <- GRanges(seqnames = Rle(islandHMM[,1]),
ranges = IRanges(start = islandHMM[,2], end = islandHMM[,3]),
strand = Rle(strand(rep("*", nrow(islandHMM)))))
islandData
islandData
shiny::runApp('~/Desktop/Shiny_apps/Shiny_diseases_predictor_RF')
world_data <- readRDS("world.rds")# Contains map
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
world_data <- readRDS("world.rds")# Contains map
world_data2 <- read.csv("countries_codes_and_coordinates.csv", header=T) # contains ISO3
head(world_data)
head(world_data2)
# world_data <- map_data("world") # Contains map
# world_data <- fortify(world_data) # To avoid losing map
world_data <- readRDS("world.rds")
head(world_data)
# check map
ggplot(world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(fill="lightgray", colour = "white")
# check map
ggplot(world_data, aes(x = long, y = lat, )) +
geom_polygon(fill="lightgray", colour = "white")
# check map
ggplot(world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(fill="lightgray", colour = "white")
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
runApp()
# DNAseI hypersensitive sites
dnase <- read.csv(paste0(dataDirectory,"/wgEncodeRegDnaseClusteredV3chr17.bed"),
sep = "\t", stringsAsFactors = FALSE, header = FALSE)
head(dnase)
strand(rep("*", nrow(islandHMM))))
strand(rep("*", nrow(islandHMM)))
rep("*", nrow(islandHMM))
Rle(strand(rep("*", nrow(islandHMM))))
dnaseData <- GRanges(seqnames = dnase[,1],
ranges = IRanges(start = dnase[,2],
end = dnase[,3]),
strand = Rle(rep("*",nrow(dnase))),
data = dnase[,5])
dnaseData
?GRanges
iTrack <- IdeogramTrack(genome = gen, chromosome = chrom, name = "")
# indicate genome to be used
gen <- "hg19"
# index of DMR to be plotted
dmrIndex <- 1
# extract chromosome number and location from DMR results
chrom <- as.character(seqnames(results.ranges[dmrIndex]))
start <- as.numeric(start(results.ranges[dmrIndex]))
end <- as.numeric(end(results.ranges[dmrIndex]))
# add 25% extra space to plot
minbas <- start - (0.25*(end -start))
maxbase <- end + (0.25*(end -start))
iTrack <- IdeogramTrack(genome = gen, chromosome = chrom, name = "")
?IdeogramTrack
results.ranges
?GenomeAxisTrack
axTrack <- GenomeAxisTrack(
name = "Axis",
range <- IRanges(start = c(100, 300, 800), end = c(150, 400, 1000))
)
## Plotting
plotTracks(axTrack, from = 0, to = 1100)
iTrack
# add 25% extra space to plot
minbase <- start - (0.25*(end -start))
rTrack <- UcscTrack(genome = gen, chromosome = chrom, track = "NCBI RefSeq",
from = minbase, to = maxbase, trackType = "GeneRegionTrack",
rstarts = "exonStarts", rends = "exonEnds", gene="name",
symbol = "name2", transcript = "name", strand = "strand",
fill = "darkblue", stacking = "squish", name = "RefSeq",
showId= TRUE, geneSymbol = TRUE)
rTrack
# Ensure methylation data is ordered by chromosome and base position
ann450kOrd <- ann450kSub[order(ann450kSub$chr, ann450kSub$pos),]
?order
order(c(2,4,5,1,2,6))
order(c(2,4,5,1,2,6), c(3,5,6,7,8,9,0))
order(c(2,4,5,1,2,6), c(3,5,6,7,8,9))
y = c(2,4,5,1,2,6)
order(y)
# Ensure methylation data is ordered by chromosome and base position
ann450kOrd <- ann450kSub[order(ann450kSub$chr, ann450kSub$pos),]
head(ann450kOrd)
bValsOrd <- bVals[match(ann450kOrd$Name, rownames(bVals))]
head(bValsOrd)
bValsOrd <- bVals[match(ann450kOrd$Name, rownames(bVals)),]
head(bValsOrd)
# Create genomic ranges object from methylation data
cpgData <- GRanges(seqnames = Rle(ann450kOrd$chr),
ranges = IRanges(start=ann450kOrd$pos, end=ann450kOrd$pos),
strand =Rle(rep("*",nrow(ann4or))),
betas = bValsOrd)
# Create genomic ranges object from methylation data
cpgData <- GRanges(seqnames = Rle(ann450kOrd$chr),
ranges = IRanges(start=ann450kOrd$pos, end=ann450kOrd$pos),
strand =Rle(rep("*",nrow(ann450kOrd))),
betas = bValsOrd)
# methylation data track
methTrack <- DataTrack(range = cpgData, groups = targets$Sample_Group, genome = gen,
chromosome = chrom, ylim = c(-0.05,1.05), col=pal,
type=c("a","p"), name = "DNA Meth. \n(beta value)",
background.panel = "white", legend = TRUE, cex.title = 0.8,
cex.axis = 0.8, cex.legend = 0.8)
# CpG island traceback
islandTrack <- AnnotationTrack(range = islandData, genome = gen, name="CpG Is,",
chromosome=chrom, fill = "darkgreen")
# DNAaseI hypersensitive site data track
dnaseTrack <- DataTrack(range = dnaseData, genome = gen, name = "DNAseI",
type="gradient", chromosome = chrom)
?AnnotationTrack
# DMR position data track
dmrTrack <- AnnotationTrack(start = start, end = end, genome = gen, name = "DMR",
chromosome = chrom, fill = chrom)
?DataTrack
dnaseData
islandData
?UcscTrack
?GenomeAxisTrack
GenomeAxisTrack(range = NULL, name = "Axis", id, ...)
tracks <- list(iTrack, gTrack, methTrack,dmrTrack,islandTrack,dnaseTrack,rTrack)
gTrack <- GenomeAxisTrack(col = "black", cex = 1, name="", fontcolor = "black")
rTrack <- UcscTrack(genome = gen, chromosome = chrom, track = "NCBI RefSeq",
from = minbase, to = maxbase, trackType = "GeneRegionTrack",
rstarts = "exonStarts", rends = "exonEnds", gene="name",
symbol = "name2", transcript = "name", strand = "strand",
fill = "darkblue", stacking = "squish", name = "RefSeq",
showId= TRUE, geneSymbol = TRUE)
rTrack
tracks <- list(iTrack, gTrack, methTrack,dmrTrack,islandTrack,dnaseTrack,rTrack)
sizes <- c(2,2,5,2,2,2,3) # set up the relative sizes of the tracks
plotTracks(tracks, from=minbase, to = maxbase, showTitle = TRUE, add53 = TRUE,
add35 = TRUE, grid = TRUE, lty.grid = 3, sizes = sizes, length(tracks))
plotTracks(tracks, from=minbase, to = maxbase, showTitle = TRUE, add53 = TRUE,
add35 = TRUE, grid = TRUE, lty.grid = 3, sizes = sizes, length(tracks))
plotTracks(tracks, from=minbase, to = maxbase, showTitle = TRUE, add53 = TRUE,
add35 = TRUE, grid = TRUE, lty.grid = 3, sizes = sizes, length(tracks))
?plotTracks
plotTracks(tracks, from=minbase, to = maxbase, showTitle = TRUE, add53 = TRUE,
add35 = TRUE, grid = TRUE, lty.grid = 3, sizes = sizes)
# DMR position data track
dmrTrack <- AnnotationTrack(start = start, end = end, genome = gen, name = "DMR",
chromosome = chrom, fill = "darkred")
tracks <- list(iTrack, gTrack, methTrack,dmrTrack,islandTrack,dnaseTrack,rTrack)
sizes <- c(2,2,5,2,2,2,3) # set up the relative sizes of the tracks
plotTracks(tracks, from=minbase, to = maxbase, showTitle = TRUE, add53 = TRUE,
add35 = TRUE, grid = TRUE, lty.grid = 3, sizes = sizes)
